#!/bin/bash

#==============================================================================
# Azure App Registration Setup Script
#==============================================================================
# Description: Creates Azure AD app registration with service principal and 
#              assigns appropriate roles for APIM authentication
# Author: Generated by GitHub Copilot
# Version: 1.0
# Usage: ./appRegistration.sh
# Prerequisites: 
#   - Azure CLI installed and authenticated
#   - .env file with required variables in ./envName/.env
#==============================================================================

set -euo pipefail  # Exit on error, undefined vars, pipe failures
IFS=$'\n\t'        # Secure Internal Field Separator

# Script configuration
readonly SCRIPT_NAME="$(basename "$0")"
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly LOG_FILE="${SCRIPT_DIR}/app_registration.log"

#==============================================================================
# UTILITY FUNCTIONS
#==============================================================================

# Logging function with timestamp
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# Info logging
log_info() {
    log "INFO" "$@"
}

# Error logging
log_error() {
    log "ERROR" "$@" >&2
}

# Warning logging
log_warn() {
    log "WARN" "$@"
}

# Success logging
log_success() {
    log "SUCCESS" "$@"
}

# Error handler function
error_handler() {
    local line_number=$1
    log_error "Script failed at line $line_number. Exit code: $?"
    log_error "Command that failed: ${BASH_COMMAND}"
    exit 1
}

# Set error trap
trap 'error_handler ${LINENO}' ERR

# Cleanup function
cleanup() {
    log_info "Script execution completed"
}
trap cleanup EXIT

#==============================================================================
# VALIDATION FUNCTIONS
#==============================================================================

# Check if Azure CLI is installed and authenticated
check_azure_cli() {
    log_info "Checking Azure CLI availability..."
    
    if ! command -v az &> /dev/null; then
        log_error "Azure CLI is not installed. Please install it first."
        exit 1
    fi
    
    if ! az account show &> /dev/null; then
        log_error "Azure CLI is not authenticated. Please run 'az login' first."
        exit 1
    fi
    
    log_success "Azure CLI is available and authenticated"
}

# Load and validate environment variables
load_environment() {
    log_info "Loading environment variables..."
    
    local env_file="./envName/.env"
    
    if [[ ! -f "$env_file" ]]; then
        log_error ".env file not found at $env_file"
        log_error "Please create the .env file with required variables:"
        log_error "  APP_NAME=your-app-name"
        log_error "  REDIRECT_URI=https://your-domain.com/callback"
        log_error "  ROLE_NAME=Reader (optional, defaults to Reader)"
        exit 1
    fi
    
    # Safely load environment variables
    while IFS= read -r line; do
        # Skip empty lines and comments
        [[ -z "$line" || "$line" =~ ^[[:space:]]*# ]] && continue
        
        # Validate line format
        if [[ "$line" =~ ^[A-Za-z_][A-Za-z0-9_]*= ]]; then
            export "$line"
        else
            log_warn "Skipping invalid line in .env: $line"
        fi
    done < "$env_file"
    
    log_success "Environment variables loaded from $env_file"
}

# Validate required environment variables
validate_variables() {
    log_info "Validating required environment variables..."
    
    local missing_vars=()
    
    [[ -z "${APP_NAME:-}" ]] && missing_vars+=("APP_NAME")
    [[ -z "${REDIRECT_URI:-}" ]] && missing_vars+=("REDIRECT_URI")
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Missing required environment variables: ${missing_vars[*]}"
        log_error "Please set these variables in your .env file"
        exit 1
    fi
    
    # Set default values
    ROLE_NAME="${ROLE_NAME:-Reader}"
    
    # Validate redirect URI format
    if [[ ! "$REDIRECT_URI" =~ ^https?:// ]]; then
        log_error "REDIRECT_URI must be a valid HTTP/HTTPS URL: $REDIRECT_URI"
        exit 1
    fi
    
    log_success "All required variables are valid"
    log_info "Configuration:"
    log_info "  App Name: $APP_NAME"
    log_info "  Redirect URI: $REDIRECT_URI"
    log_info "  Role: $ROLE_NAME"
}

#==============================================================================
# AZURE OPERATIONS
#==============================================================================

# Get Azure tenant and subscription information
get_azure_info() {
    log_info "Retrieving Azure tenant and subscription information..."
    
    TENANT_ID=$(az account show --query tenantId -o tsv 2>/dev/null) || {
        log_error "Failed to get tenant ID"
        exit 1
    }
    
    SUBSCRIPTION_ID=$(az account show --query id -o tsv 2>/dev/null) || {
        log_error "Failed to get subscription ID"
        exit 1
    }
    
    log_success "Azure information retrieved"
    log_info "  Tenant ID: $TENANT_ID"
    log_info "  Subscription ID: $SUBSCRIPTION_ID"
}

# Create or find app registration
create_app_registration() {
    log_info "Checking for existing app registration: $APP_NAME"
    
    APP_ID=$(az ad app list --display-name "$APP_NAME" --query "[0].appId" -o tsv 2>/dev/null || echo "")
    
    if [[ -z "$APP_ID" ]]; then
        log_info "Creating new app registration: $APP_NAME"
        
        APP_ID=$(az ad app create \
            --display-name "$APP_NAME" \
            --web-redirect-uris "$REDIRECT_URI" \
            --query appId -o tsv 2>/dev/null) || {
            log_error "Failed to create app registration"
            exit 1
        }
        
        log_success "App registration created successfully"
        log_info "  App ID: $APP_ID"
    else
        log_warn "App registration '$APP_NAME' already exists"
        log_info "  App ID: $APP_ID"
        
        # Update redirect URI if needed
        log_info "Updating redirect URI for existing app..."
        az ad app update --id "$APP_ID" --web-redirect-uris "$REDIRECT_URI" &>/dev/null || {
            log_warn "Failed to update redirect URI, but continuing..."
        }
    fi
}

# Create service principal
create_service_principal() {
    log_info "Checking for existing service principal..."
    
    SP_ID=$(az ad sp list --filter "appId eq '$APP_ID'" --query "[0].id" -o tsv 2>/dev/null || echo "")
    
    if [[ -z "$SP_ID" ]]; then
        log_info "Creating service principal for app ID: $APP_ID"
        
        az ad sp create --id "$APP_ID" &>/dev/null || {
            log_error "Failed to create service principal"
            exit 1
        }
        
        log_success "Service principal created successfully"
        
        # Wait a moment for service principal to propagate
        log_info "Waiting for service principal to propagate..."
        sleep 10
    else
        log_warn "Service principal already exists"
        log_info "  Service Principal ID: $SP_ID"
    fi
}

# Assign role to service principal
assign_role() {
    log_info "Assigning role '$ROLE_NAME' at subscription scope..."
    
    local max_retries=3
    local retry_count=0
    
    while [[ $retry_count -lt $max_retries ]]; do
        if az role assignment create \
            --assignee "$APP_ID" \
            --role "$ROLE_NAME" \
            --scope "/subscriptions/$SUBSCRIPTION_ID" \
            --only-show-errors &>/dev/null; then
            
            log_success "Role '$ROLE_NAME' assigned successfully"
            return 0
        else
            ((retry_count++))
            if [[ $retry_count -lt $max_retries ]]; then
                log_warn "Role assignment failed, retrying in 5 seconds... (attempt $retry_count/$max_retries)"
                sleep 5
            fi
        fi
    done
    
    # Check if role is already assigned
    local existing_assignment=$(az role assignment list \
        --assignee "$APP_ID" \
        --role "$ROLE_NAME" \
        --scope "/subscriptions/$SUBSCRIPTION_ID" \
        --query "[0].id" -o tsv 2>/dev/null || echo "")
    
    if [[ -n "$existing_assignment" ]]; then
        log_warn "Role '$ROLE_NAME' is already assigned"
    else
        log_error "Failed to assign role after $max_retries attempts"
        exit 1
    fi
}

# Create client secret
create_client_secret() {
    log_info "Creating client secret..."
    
    # Generate a descriptive name for the secret
    local secret_name="Generated-$(date +%Y%m%d-%H%M%S)"
    
    SECRET=$(az ad app credential reset \
        --id "$APP_ID" \
        --append \
        --display-name "$secret_name" \
        --query password -o tsv 2>/dev/null) || {
        log_error "Failed to create client secret"
        exit 1
    }
    
    if [[ -z "$SECRET" ]]; then
        log_error "Client secret was not generated"
        exit 1
    fi
    
    log_success "Client secret created successfully"
    log_warn "IMPORTANT: Store the client secret securely - it won't be shown again!"
}

# Display results
display_results() {
    log_success "App Registration Setup Complete!"
    
    cat << EOF

==========================================
 AZURE APP REGISTRATION DETAILS
==========================================
App Name:        $APP_NAME
Client ID:       $APP_ID
Tenant ID:       $TENANT_ID
Subscription ID: $SUBSCRIPTION_ID
Role Assigned:   $ROLE_NAME
Redirect URI:    $REDIRECT_URI

CLIENT SECRET:   $SECRET

==========================================
 SECURITY NOTICE
==========================================
⚠️  IMPORTANT: The client secret above is shown only once.
   Store it securely in your key vault or secure configuration.
   
📝 Consider saving these details to your .env file:
   AZURE_CLIENT_ID=$APP_ID
   AZURE_TENANT_ID=$TENANT_ID
   AZURE_CLIENT_SECRET=$SECRET

EOF

    # Optionally save to a secure file
    if command -v gpg &> /dev/null; then
        log_info "GPG detected. Consider encrypting the credentials:"
        log_info "  echo 'CLIENT_SECRET=$SECRET' | gpg --encrypt --armor -r your-email@domain.com > client_secret.gpg"
    fi
}

#==============================================================================
# MAIN EXECUTION
#==============================================================================

main() {
    log_info "Starting Azure App Registration setup..."
    log_info "Script: $SCRIPT_NAME"
    log_info "Version: 1.0"
    log_info "Log file: $LOG_FILE"
    
    # Pre-flight checks
    check_azure_cli
    load_environment
    validate_variables
    get_azure_info
    
    # Main operations
    create_app_registration
    create_service_principal
    assign_role
    create_client_secret
    
    # Results
    display_results
    
    log_success "Script completed successfully!"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
